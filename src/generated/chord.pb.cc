// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chord.proto

#include "chord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_chord_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Finger_chord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chord_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FingerTable_chord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chord_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Node_chord_2eproto;
namespace chord {
class DumpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DumpRequest> _instance;
} _DumpRequest_default_instance_;
class DumpResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DumpResponse> _instance;
} _DumpResponse_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class FingerTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FingerTable> _instance;
} _FingerTable_default_instance_;
class FingerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Finger> _instance;
} _Finger_default_instance_;
}  // namespace chord
static void InitDefaultsDumpRequest_chord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chord::_DumpRequest_default_instance_;
    new (ptr) ::chord::DumpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chord::DumpRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DumpRequest_chord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDumpRequest_chord_2eproto}, {}};

static void InitDefaultsDumpResponse_chord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chord::_DumpResponse_default_instance_;
    new (ptr) ::chord::DumpResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chord::DumpResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DumpResponse_chord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDumpResponse_chord_2eproto}, {
      &scc_info_Node_chord_2eproto.base,}};

static void InitDefaultsNode_chord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chord::_Node_default_instance_;
    new (ptr) ::chord::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chord::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Node_chord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNode_chord_2eproto}, {
      &scc_info_FingerTable_chord_2eproto.base,}};

static void InitDefaultsFingerTable_chord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chord::_FingerTable_default_instance_;
    new (ptr) ::chord::FingerTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chord::FingerTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FingerTable_chord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFingerTable_chord_2eproto}, {
      &scc_info_Finger_chord_2eproto.base,}};

static void InitDefaultsFinger_chord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chord::_Finger_default_instance_;
    new (ptr) ::chord::Finger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chord::Finger::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Finger_chord_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinger_chord_2eproto}, {}};

void InitDefaults_chord_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DumpRequest_chord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DumpResponse_chord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node_chord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FingerTable_chord_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Finger_chord_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_chord_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_chord_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_chord_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_chord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chord::DumpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chord::DumpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chord::DumpResponse, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chord::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chord::Node, addr_),
  PROTOBUF_FIELD_OFFSET(::chord::Node, n_),
  PROTOBUF_FIELD_OFFSET(::chord::Node, succ_),
  PROTOBUF_FIELD_OFFSET(::chord::Node, pred_),
  PROTOBUF_FIELD_OFFSET(::chord::Node, tbl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chord::FingerTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chord::FingerTable, fingers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chord::Finger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chord::Finger, addr_),
  PROTOBUF_FIELD_OFFSET(::chord::Finger, idx_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chord::DumpRequest)},
  { 5, -1, sizeof(::chord::DumpResponse)},
  { 11, -1, sizeof(::chord::Node)},
  { 21, -1, sizeof(::chord::FingerTable)},
  { 27, -1, sizeof(::chord::Finger)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chord::_DumpRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chord::_DumpResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chord::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chord::_FingerTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chord::_Finger_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_chord_2eproto = {
  {}, AddDescriptors_chord_2eproto, "chord.proto", schemas,
  file_default_instances, TableStruct_chord_2eproto::offsets,
  file_level_metadata_chord_2eproto, 5, file_level_enum_descriptors_chord_2eproto, file_level_service_descriptors_chord_2eproto,
};

const char descriptor_table_protodef_chord_2eproto[] =
  "\n\013chord.proto\022\005chord\"\r\n\013DumpRequest\")\n\014D"
  "umpResponse\022\031\n\004node\030\001 \001(\0132\013.chord.Node\"\\"
  "\n\004Node\022\014\n\004addr\030\001 \001(\t\022\t\n\001n\030\002 \001(\r\022\014\n\004succ\030"
  "\003 \001(\t\022\014\n\004pred\030\004 \001(\t\022\037\n\003tbl\030\005 \001(\0132\022.chord"
  ".FingerTable\"-\n\013FingerTable\022\036\n\007fingers\030\001"
  " \003(\0132\r.chord.Finger\"#\n\006Finger\022\014\n\004addr\030\001 "
  "\001(\t\022\013\n\003idx\030\002 \001(\r2>\n\005Chord\0225\n\010DumpNode\022\022."
  "chord.DumpRequest\032\023.chord.DumpResponse\"\000"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_chord_2eproto = {
  false, InitDefaults_chord_2eproto, 
  descriptor_table_protodef_chord_2eproto,
  "chord.proto", &assign_descriptors_table_chord_2eproto, 328,
};

void AddDescriptors_chord_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_chord_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chord_2eproto = []() { AddDescriptors_chord_2eproto(); return true; }();
namespace chord {

// ===================================================================

void DumpRequest::InitAsDefaultInstance() {
}
class DumpRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpRequest::DumpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.DumpRequest)
}
DumpRequest::DumpRequest(const DumpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chord.DumpRequest)
}

void DumpRequest::SharedCtor() {
}

DumpRequest::~DumpRequest() {
  // @@protoc_insertion_point(destructor:chord.DumpRequest)
  SharedDtor();
}

void DumpRequest::SharedDtor() {
}

void DumpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpRequest& DumpRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DumpRequest_chord_2eproto.base);
  return *internal_default_instance();
}


void DumpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chord.DumpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DumpRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DumpRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DumpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.DumpRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chord.DumpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.DumpRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DumpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.DumpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chord.DumpRequest)
}

::google::protobuf::uint8* DumpRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.DumpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chord.DumpRequest)
  return target;
}

size_t DumpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chord.DumpRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chord.DumpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpRequest* source =
      ::google::protobuf::DynamicCastToGenerated<DumpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chord.DumpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chord.DumpRequest)
    MergeFrom(*source);
  }
}

void DumpRequest::MergeFrom(const DumpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chord.DumpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DumpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chord.DumpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpRequest::CopyFrom(const DumpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chord.DumpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpRequest::IsInitialized() const {
  return true;
}

void DumpRequest::Swap(DumpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpRequest::InternalSwap(DumpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DumpRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_chord_2eproto);
  return ::file_level_metadata_chord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DumpResponse::InitAsDefaultInstance() {
  ::chord::_DumpResponse_default_instance_._instance.get_mutable()->node_ = const_cast< ::chord::Node*>(
      ::chord::Node::internal_default_instance());
}
class DumpResponse::HasBitSetters {
 public:
  static const ::chord::Node& node(const DumpResponse* msg);
};

const ::chord::Node&
DumpResponse::HasBitSetters::node(const DumpResponse* msg) {
  return *msg->node_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DumpResponse::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DumpResponse::DumpResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.DumpResponse)
}
DumpResponse::DumpResponse(const DumpResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::chord::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chord.DumpResponse)
}

void DumpResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DumpResponse_chord_2eproto.base);
  node_ = nullptr;
}

DumpResponse::~DumpResponse() {
  // @@protoc_insertion_point(destructor:chord.DumpResponse)
  SharedDtor();
}

void DumpResponse::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void DumpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpResponse& DumpResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DumpResponse_chord_2eproto.base);
  return *internal_default_instance();
}


void DumpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chord.DumpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DumpResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DumpResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .chord.Node node = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::chord::Node::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DumpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.DumpResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chord.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.DumpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.DumpResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DumpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.DumpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chord.Node node = 1;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chord.DumpResponse)
}

::google::protobuf::uint8* DumpResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.DumpResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chord.Node node = 1;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chord.DumpResponse)
  return target;
}

size_t DumpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chord.DumpResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .chord.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chord.DumpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpResponse* source =
      ::google::protobuf::DynamicCastToGenerated<DumpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chord.DumpResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chord.DumpResponse)
    MergeFrom(*source);
  }
}

void DumpResponse::MergeFrom(const DumpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chord.DumpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    mutable_node()->::chord::Node::MergeFrom(from.node());
  }
}

void DumpResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chord.DumpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpResponse::CopyFrom(const DumpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chord.DumpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpResponse::IsInitialized() const {
  return true;
}

void DumpResponse::Swap(DumpResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DumpResponse::InternalSwap(DumpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(node_, other->node_);
}

::google::protobuf::Metadata DumpResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_chord_2eproto);
  return ::file_level_metadata_chord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::chord::_Node_default_instance_._instance.get_mutable()->tbl_ = const_cast< ::chord::FingerTable*>(
      ::chord::FingerTable::internal_default_instance());
}
class Node::HasBitSetters {
 public:
  static const ::chord::FingerTable& tbl(const Node* msg);
};

const ::chord::FingerTable&
Node::HasBitSetters::tbl(const Node* msg) {
  return *msg->tbl_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kAddrFieldNumber;
const int Node::kNFieldNumber;
const int Node::kSuccFieldNumber;
const int Node::kPredFieldNumber;
const int Node::kTblFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  succ_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.succ().size() > 0) {
    succ_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.succ_);
  }
  pred_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pred().size() > 0) {
    pred_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pred_);
  }
  if (from.has_tbl()) {
    tbl_ = new ::chord::FingerTable(*from.tbl_);
  } else {
    tbl_ = nullptr;
  }
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:chord.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Node_chord_2eproto.base);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pred_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&tbl_)) + sizeof(n_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:chord.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pred_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tbl_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Node_chord_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:chord.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  succ_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pred_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tbl_ != nullptr) {
    delete tbl_;
  }
  tbl_ = nullptr;
  n_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Node::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Node*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("chord.Node.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 n = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_n(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string succ = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("chord.Node.succ");
        object = msg->mutable_succ();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string pred = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("chord.Node.pred");
        object = msg->mutable_pred();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .chord.FingerTable tbl = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::chord::FingerTable::_InternalParse;
        object = msg->mutable_tbl();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chord.Node.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string succ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_succ()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->succ().data(), static_cast<int>(this->succ().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chord.Node.succ"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pred = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pred()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pred().data(), static_cast<int>(this->pred().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chord.Node.pred"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chord.FingerTable tbl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tbl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Node.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 n = 2;
  if (this->n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->n(), output);
  }

  // string succ = 3;
  if (this->succ().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->succ().data(), static_cast<int>(this->succ().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Node.succ");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->succ(), output);
  }

  // string pred = 4;
  if (this->pred().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pred().data(), static_cast<int>(this->pred().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Node.pred");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pred(), output);
  }

  // .chord.FingerTable tbl = 5;
  if (this->has_tbl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::tbl(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chord.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Node.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 n = 2;
  if (this->n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->n(), target);
  }

  // string succ = 3;
  if (this->succ().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->succ().data(), static_cast<int>(this->succ().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Node.succ");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->succ(), target);
  }

  // string pred = 4;
  if (this->pred().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pred().data(), static_cast<int>(this->pred().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Node.pred");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pred(), target);
  }

  // .chord.FingerTable tbl = 5;
  if (this->has_tbl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::tbl(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chord.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chord.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string succ = 3;
  if (this->succ().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->succ());
  }

  // string pred = 4;
  if (this->pred().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pred());
  }

  // .chord.FingerTable tbl = 5;
  if (this->has_tbl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tbl_);
  }

  // uint32 n = 2;
  if (this->n() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chord.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chord.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chord.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chord.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.succ().size() > 0) {

    succ_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.succ_);
  }
  if (from.pred().size() > 0) {

    pred_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pred_);
  }
  if (from.has_tbl()) {
    mutable_tbl()->::chord::FingerTable::MergeFrom(from.tbl());
  }
  if (from.n() != 0) {
    set_n(from.n());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chord.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chord.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  succ_.Swap(&other->succ_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pred_.Swap(&other->pred_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbl_, other->tbl_);
  swap(n_, other->n_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_chord_2eproto);
  return ::file_level_metadata_chord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FingerTable::InitAsDefaultInstance() {
}
class FingerTable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FingerTable::kFingersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FingerTable::FingerTable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.FingerTable)
}
FingerTable::FingerTable(const FingerTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fingers_(from.fingers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chord.FingerTable)
}

void FingerTable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FingerTable_chord_2eproto.base);
}

FingerTable::~FingerTable() {
  // @@protoc_insertion_point(destructor:chord.FingerTable)
  SharedDtor();
}

void FingerTable::SharedDtor() {
}

void FingerTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingerTable& FingerTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FingerTable_chord_2eproto.base);
  return *internal_default_instance();
}


void FingerTable::Clear() {
// @@protoc_insertion_point(message_clear_start:chord.FingerTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FingerTable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FingerTable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .chord.Finger fingers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::chord::Finger::_InternalParse;
          object = msg->add_fingers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FingerTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.FingerTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chord.Finger fingers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fingers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.FingerTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.FingerTable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FingerTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.FingerTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chord.Finger fingers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fingers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fingers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chord.FingerTable)
}

::google::protobuf::uint8* FingerTable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.FingerTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chord.Finger fingers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fingers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fingers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chord.FingerTable)
  return target;
}

size_t FingerTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chord.FingerTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chord.Finger fingers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fingers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fingers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingerTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chord.FingerTable)
  GOOGLE_DCHECK_NE(&from, this);
  const FingerTable* source =
      ::google::protobuf::DynamicCastToGenerated<FingerTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chord.FingerTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chord.FingerTable)
    MergeFrom(*source);
  }
}

void FingerTable::MergeFrom(const FingerTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chord.FingerTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingers_.MergeFrom(from.fingers_);
}

void FingerTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chord.FingerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerTable::CopyFrom(const FingerTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chord.FingerTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerTable::IsInitialized() const {
  return true;
}

void FingerTable::Swap(FingerTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FingerTable::InternalSwap(FingerTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fingers_)->InternalSwap(CastToBase(&other->fingers_));
}

::google::protobuf::Metadata FingerTable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_chord_2eproto);
  return ::file_level_metadata_chord_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Finger::InitAsDefaultInstance() {
}
class Finger::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Finger::kAddrFieldNumber;
const int Finger::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Finger::Finger()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chord.Finger)
}
Finger::Finger(const Finger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:chord.Finger)
}

void Finger::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Finger_chord_2eproto.base);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idx_ = 0u;
}

Finger::~Finger() {
  // @@protoc_insertion_point(destructor:chord.Finger)
  SharedDtor();
}

void Finger::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Finger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Finger& Finger::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Finger_chord_2eproto.base);
  return *internal_default_instance();
}


void Finger::Clear() {
// @@protoc_insertion_point(message_clear_start:chord.Finger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idx_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Finger::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Finger*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("chord.Finger.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 idx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Finger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chord.Finger)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chord.Finger.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chord.Finger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chord.Finger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Finger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chord.Finger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Finger.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chord.Finger)
}

::google::protobuf::uint8* Finger::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:chord.Finger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chord.Finger.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chord.Finger)
  return target;
}

size_t Finger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chord.Finger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 idx = 2;
  if (this->idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Finger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chord.Finger)
  GOOGLE_DCHECK_NE(&from, this);
  const Finger* source =
      ::google::protobuf::DynamicCastToGenerated<Finger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chord.Finger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chord.Finger)
    MergeFrom(*source);
  }
}

void Finger::MergeFrom(const Finger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chord.Finger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void Finger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chord.Finger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Finger::CopyFrom(const Finger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chord.Finger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Finger::IsInitialized() const {
  return true;
}

void Finger::Swap(Finger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Finger::InternalSwap(Finger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idx_, other->idx_);
}

::google::protobuf::Metadata Finger::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_chord_2eproto);
  return ::file_level_metadata_chord_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chord
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::chord::DumpRequest* Arena::CreateMaybeMessage< ::chord::DumpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chord::DumpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chord::DumpResponse* Arena::CreateMaybeMessage< ::chord::DumpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chord::DumpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chord::Node* Arena::CreateMaybeMessage< ::chord::Node >(Arena* arena) {
  return Arena::CreateInternal< ::chord::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::chord::FingerTable* Arena::CreateMaybeMessage< ::chord::FingerTable >(Arena* arena) {
  return Arena::CreateInternal< ::chord::FingerTable >(arena);
}
template<> PROTOBUF_NOINLINE ::chord::Finger* Arena::CreateMaybeMessage< ::chord::Finger >(Arena* arena) {
  return Arena::CreateInternal< ::chord::Finger >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
